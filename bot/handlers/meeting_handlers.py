from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardRemove

from database.connection import AsyncSessionLocal
import database.methods

from aiogram.fsm.context import FSMContext
from middleware.auth import auth
from states.meeting_states import MeetingNewUser

from keyboards import start_kb

router = Router()

@router.message(CommandStart())
@router.message(F.text == "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è")
async def start_handler(message: types.Message, state: FSMContext):
    await state.set_state(MeetingNewUser.name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—è, –∞ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())

@router.message(MeetingNewUser.name)
async def name_handler(message: types.Message, state: FSMContext):
    name = message.text.strip().lower()
    await state.update_data(name=name)
    await state.set_state(MeetingNewUser.diminutive_affectionate)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name.capitalize()}! –ê –∫–∞–∫ —è –º–æ–≥—É –ª–∞—Å–∫–æ–≥–æ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å? –¢–æ–ª—å–∫–æ –¥–∞–≤–∞–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã —è –ø–æ—Ç–æ–º –Ω–µ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å.")

@router.message(MeetingNewUser.diminutive_affectionate)
async def diminutive_affectionate_handler(message: types.Message, state: FSMContext):
    message_text = message.text.strip().lower()
    if message_text != "–Ω–∏–∫–∞–∫":
        if ',' in message_text:
            diminutive_affectionate = [item.strip() for item in message_text.split(',')]
            await message.answer(f"–û–≥–æ, –∫–∞–∫ –º–Ω–æ–≥–æ!")
        else:
            diminutive_affectionate = [message_text]
            await message.answer(f"–Ø –∑–∞–ø–æ–º–Ω—é :)")
    else:
        diminutive_affectionate = None
        await message.answer(f"–û–π, –Ω—É –∏ –ª–∞–¥–Ω–æ :(")

    await state.update_data(diminutive_affectionate=diminutive_affectionate)
    await state.set_state(MeetingNewUser.timezone)
    await message.answer(f"–ê –≤ –∫–∞–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ —Ç—ã –∂–∏–≤–µ—à—å?", reply_markup=await start_kb.meeting_timezone_keyboard())


@router.callback_query(F.data.startswith("selectedtimezone_"))
async def handle_selected_timezone_callback(callback_query: types.CallbackQuery, state: FSMContext):
    timezone = callback_query.data.split("_")[1]
    await state.update_data(timezone=timezone)

    await callback_query.message.answer("–ê –ø–æ –∫–∞–∫–æ–º—É —Ä–∞–±–æ—á–µ–º—É –≥—Ä–∞—Ñ–∏–∫—É —Ç—ã –∂–∏–≤–µ—à—å?", reply_markup=await start_kb.meeting_weektype_keyboard())
    await callback_query.answer()

@router.callback_query(F.data.startswith("selectedweektype_"))
async def handle_selected_weektype_callback(callback_query: types.CallbackQuery, state: FSMContext):
    weektype = callback_query.data.split("_")[1]
    await state.update_data(weektype=weektype)
    await callback_query.message.answer("–í–æ—Ç –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, —É—Ä–∞ —É—Ä–∞ :3")
    data = await state.get_data()
    await callback_query.answer()

    async with AsyncSessionLocal() as session:
        await database.methods.update_user(
            session=session,
            telegram_id=callback_query.from_user.id,
            username=callback_query.from_user.username,
            name=data['name'],
            timezone_id=data['timezone'],
            weektype_id=data['weektype'],
            diminutive_affectionate_list=data['diminutive_affectionate']
        )

    await state.clear()

@auth
@router.message(F.text == "–ó–∞–±—É–¥—å –º–µ–Ω—è")
async def forgive_me_handler(message: types.Message):
    async with AsyncSessionLocal() as session:
        await database.methods.delete_user(session, message.from_user.id)
    await message.answer("–Ø –Ω–∏–∫–æ–≥–¥–∞ —Ç–µ–±—è –Ω–µ –∑–∞–±—É–¥—É! –ù–æ —Ç–∞–∫ —É–∂ –∏ –±—ã—Ç—å, —Å–¥–µ–ª–∞—é –≤–∏–¥ —á—Ç–æ –Ω–µ –ø–æ–º–Ω—é üòú")